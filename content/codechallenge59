Title: Code Challenge 59 - Build your own Shell - Part I Date: 2019-01-06 09:40 Category: Challenge Tags: code challenge, challenges Slug: codechallenge58 Authors: Mridu Bhatnagar Summary: Hi Pythonistas, Welcome to Pybites Code Challenge 59! In this challenge pick the modules which fit the best, with only one end goal in mind To build your own Shell.

LEVEL 0
1. Build an command line interface for your python application. It should be able to function like the bash commands.
You can replicate command of your own choice. Have a nice helper function for the complete application.

Examples

```
python <filename.py> --help
```
This should list all the possible commands. Along with there usage description and possible arguments one can use with each
command.

```
python <filename.py> help pwd
```
Should give a detailed description about pwd. Something like

```
cd: cd [-L|[-P [-e]] [-@]] [dir]
    Change the shell working directory.
    
    Change the current directory to DIR.  The default DIR is the value of the
    HOME shell variable.
    
    The variable CDPATH defines the search path for the directory containing
    DIR.  Alternative directory names in CDPATH are separated by a colon (:).
    A null directory name is the same as the current directory.  If DIR begins
    with a slash (/), then CDPATH is not used.
    
    If the directory is not found, and the shell option `cdable_vars' is set,
    the word is assumed to be  a variable name.  If that variable has a value,
    its value is used for DIR.
    
    Options:
        -L	force symbolic links to be followed: resolve symbolic links in
    	DIR after processing instances of `..'
        -P	use the physical directory structure without following symbolic
    	links: resolve symbolic links in DIR before processing instances
    	of `..'
        -e	if the -P option is supplied, and the current working directory
    	cannot be determined successfully, exit with a non-zero status
        -@  on systems that support it, present a file with extended attributes
            as a directory containing the file attributes
    
    The default is to follow symbolic links, as if `-L' were specified.
    `..' is processed by removing the immediately previous pathname component
    back to a slash or the beginning of DIR.
    
    Exit Status:
    Returns 0 if the directory is changed, and if $PWD is set successfully when
    -P is used; non-zero otherwise.
```




